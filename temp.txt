const eatGap = async () => {
    let gap;
    const totem = this.bot.inventory
      .items()
      .find((i) => i.name.includes("totem"));
    for (const item of this.bot.inventory.items()) {
      if (
        item.name === "golden_apple" ||
        item.name === "enchanted_golden_apple"
      ) {
        gap = item;
        break;
      }
    }

    if (gap == undefined) return;

    if (gap && !this.eating && this.IsCombat) {
      try {
        if (this.bot.heldItem.type === gap.type) {
          this.eating = true;
          if (this.bot.usingHeldItem) {
            this.bot.deactivateItem();
          }
          const pearl = await this.getItemByName("ender_pearl");
          const shouldPearlaway = Math.random() < 0.0512;
          const shouldPearlaway1 = pearl ? true : false;
          if (
            shouldPearlaway &&
            shouldPearlaway1 &&
            this.settings.aggressive
          ) {
            await this.pearlAway();
            this.bot.activateItem();
            await sleep(1600);
            this.bot.deactivateItem();
            this.eating = false;
          } else {
            await this.bot.lookAt(
              this.bot.entity.position.offset(0, 0, -180),
              true
            );
            this.bot.activateItem();
            await sleep(1600);
            this.bot.deactivateItem();
            this.eating = false;
          }
        } else if (this.bot?.heldItem.type !== gap.type) {
          this.eating = true;
          const pearl = await this.getItemByName("ender_pearl");
          const shouldPearlaway = Math.random() < 0.0512;
          const shouldPearlaway1 = pearl ? true : false;
          if (
            shouldPearlaway &&
            shouldPearlaway1 &&
            this.settings.aggressive
          ) {
            await this.pearlAway();
            await this.bot.equip(gap, "hand");
            this.bot.activateItem();
            await sleep(1600);
            this.bot.deactivateItem();
            this.eating = false;
          } else {
            await this.bot.lookAt(
              this.bot.entity.position.offset(0, 0, -180),
              true
            );
            this.bot.activateItem();
            await sleep(1600);
            this.bot.deactivateItem();
            this.eating = false;
          }
        }
      } catch (err) {
        this.logError(err);
        this.eating = false;
        await sleep(1000);
      }
    }
    sleep(1000);
  };